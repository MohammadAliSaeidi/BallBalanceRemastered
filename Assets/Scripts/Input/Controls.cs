//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""BallMovement"",
            ""id"": ""a3ac8e08-bced-40a3-843f-7fc1775610ad"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7ad63239-aca3-45b2-ace3-239b5715047a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a478b7da-a01a-4cfd-843b-28f76466862f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""65df47dd-93ec-4d4b-98b5-480894546e3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd6136b3-629f-4cba-b417-03169b0aacf9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09e061b8-020e-417f-a873-c193fecb0022"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a02c425e-dc50-4f2b-817d-b09c5f22ae11"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseAndKeyboard"",
            ""bindingGroup"": ""MouseAndKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BallMovement
        m_BallMovement = asset.FindActionMap("BallMovement", throwIfNotFound: true);
        m_BallMovement_Jump = m_BallMovement.FindAction("Jump", throwIfNotFound: true);
        m_BallMovement_Move = m_BallMovement.FindAction("Move", throwIfNotFound: true);
        m_BallMovement_Look = m_BallMovement.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BallMovement
    private readonly InputActionMap m_BallMovement;
    private IBallMovementActions m_BallMovementActionsCallbackInterface;
    private readonly InputAction m_BallMovement_Jump;
    private readonly InputAction m_BallMovement_Move;
    private readonly InputAction m_BallMovement_Look;
    public struct BallMovementActions
    {
        private @Controls m_Wrapper;
        public BallMovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BallMovement_Jump;
        public InputAction @Move => m_Wrapper.m_BallMovement_Move;
        public InputAction @Look => m_Wrapper.m_BallMovement_Look;
        public InputActionMap Get() { return m_Wrapper.m_BallMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallMovementActions set) { return set.Get(); }
        public void SetCallbacks(IBallMovementActions instance)
        {
            if (m_Wrapper.m_BallMovementActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_BallMovementActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_BallMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public BallMovementActions @BallMovement => new BallMovementActions(this);
    private int m_MouseAndKeyboardSchemeIndex = -1;
    public InputControlScheme MouseAndKeyboardScheme
    {
        get
        {
            if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAndKeyboard");
            return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
        }
    }
    public interface IBallMovementActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
